---------------------------------------------------------------------------
------------------------- INSTALLING UBUNTU 14.04 -------------------------
---------------------------------------------------------------------------

STEP 1: Create bootable thumb drive or USB
		Go to BIOS and rearrange boot settings to place liveUSB or liveCD to highest preference

STEP 2: Reboot your computer and when you reach the GRUB options, highlight Install Ubuntu and hit 'e'
		Replace the 'quiet splash' string with 'nomodeset'

STEP 3: Reboot and select Install Ubuntu option from GRUB menu
		Follow installation - Erase Ubuntu 14.04.4 LTS and reinstall
		Reboot and go to BIOS and rearrange the boot order to push back the liveUSB / liveCD lower in order

STEP 4: Reboot and hit ESC before login to into GRUB
		Highlight Ubuntu and hit 'e' again and replace 'quiet splash' string with 'nomodeset'
		Reboot and you should be able to login



---------------------------------------------------------------------------
-------------------- VERIFICATION OF GPU COMPATIBILITY --------------------
---------------------------------------------------------------------------

STEP 1: Verify that your GPU is CUDA compatible
		$ lspci | grep -i nvidia
STEP 2: Verify that your version of linux is CUDA compatible
		$ uname -m && cat /etc/*release
		(x86_64 should confirm that you are running a 64bit OS)
STEP 3: Verify that you have GCC installed
		$ gcc --version
		If you don't have GCC installed, you need to download an appropriate version or install it from the development tools
STEP 4: Check the version of the kernel that your system is running
		$ uname -r
STEP 5: The kernel headers and development packages for the currently running kernel can be installed
		$ sudo apt-get install linux-headers-$(uname -r)




---------------------------------------------------------------------------
------------------- INSTALLING CUDA VIA DEBIAN PACKAGE --------------------
---------------------------------------------------------------------------

STEP 1: To install debian package for CUDA
		$ `sudo dpkg -i cuda-repo-ubuntu1404-8-0-rc_8.0.27-1_amd64-deb`
		$ `sudo apt-get update`
		$ `sudo apt-get install cuda`
STEP 2: Reboot the system to load the NVIDIA drivers
STEP 3: Set up the development environment by modifiying the PATH and LD_LIBRARY_PATH environment variables
		$ export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}} 
		$ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64\
                         ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
        NOTE: If exporting to .bashrc profile doesn't work, open ~/.bashrc file and add these lines manually
        	To find the .bashrc file:
        		$ cd /home
        		$ ls -la ~/ | more
        		If you cannot find a .bashrc file, create it using 
        			$ vi ~/.bashrc
        	Most of the distributions keep a .bashrc file in /etc/skel/
        		Copy it into your home directory using $ cp /etc/skel/.bashrc ~

STEP 4: Install samples
		$ cuda-install-samples-8.0.sh ~
		$ cd ~/NVIDIA_CUDA-8.0_Samples/5_Simulations/nbody
		$ make
		$ ./nbody




---------------------------------------------------------------------------
----------------------- INSTALLING CUDA VIA RUNFILE -----------------------
---------------------------------------------------------------------------

STEP 1: Disable Nouveau drivers
		Create a file blacklist-nouveau.conf at /etc/modprobe.d/blacklist-nouveau.conf with the following contents
			blacklist nouveau
			options nouveau mdoeset=0
		Regenerate the kernel initramfs
			$ sudo update-initramfs -u
STEP 2: Reboot into runlevel 3 by temporarily adding the number "3" and the word "nomodeset" to the end of the system's kernel boot parameters.
STEP 3: Run installer with implied acceptance of EULA
		$ `sudo sh cuda_8.0.27_linux.run --silent`
STEP 4: Create an xorg.conf file to use the NVIDIA GPU for display
		$ sudo nvidia-xconfig
STEP 5: Reboot the system
STEP 6: Set up the development environment by modifiying the PATH and LD_LIBRARY_PATH environment variables
		$ export PATH=/usr/local/cuda-8.0/bin${PATH:+:${PATH}} 
		$ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64\
                         ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
STEP 7: Install samples
		$ cuda-install-samples-8.0.sh ~
		$ cd ~/NVIDIA_CUDA-8.0_Samples/5_Simulations/nbody
		$ make
		$ ./nbody



tar -xzvf cudnn-6.5-linux-R1.tgz
cd cudnn-6.5-linux-R1
sudo cp lib* /usr/local/cuda/lib64/
sudo cp cudnn.h /usr/local/cuda/include/

do another

sudo ldconfig

to get the library symlinks set up and then rebuild caffe.




---------------------------------------------------------------------------
-------------------------- COMMON ERROR DEBUGGING -------------------------
---------------------------------------------------------------------------

1. Error while loading shared libraries: libcudart.so.4: cannot open shared object file: No such file or directory
		$ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib\ ${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
		OR
		$ sudo ldconfig usr/local/cuda/lib64

2. CURAND_STATUS_LAUNCH_FAILURE
		If you're running an NVIDIA GTX PASCAL card on CUDA 7.5 -> switch to CUDA 8.0. 

		